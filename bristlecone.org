#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Climatic Analysis of Telescope Peak Bristlecone Pine Mortality
#+date: <2022-10-18 Tue>
#+author: Stephen Huysman
#+email: shuysman@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1 (Org mode 9.5.2)
#+BIBLIOGRAPHY:bristlecone.bib
#+cite_export: csl
#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes \n :eval never-export

* Introduction
This project extends the climate analysis conducted on the PILO mortality cite documented by [cite:@bentzGreatBasinBristlecone2022].  We attempt to recreate their analysis [[*Lutz et al. 2010 Water Balance Method][here]], as well as run an additional analysis following David Thoma's simple water balance model which uses daily Daymet timeseries and incorporates additional physical site parameters and therefore may provided a more advanced, and hopefully accurate, analysis of the site.

Our aim is to examine the mortality event occuring at Panamint Range (Telescope Peak), which was attributed to Mountain Pine Beetle [cite:@bentzGreatBasinBristlecone2022].  Mortality events also occured at Wah Wah Mountains (Pinyon Ips), Silver Peak (unattributed) , and Hot Creek Range/Rawhide (unattributed).

Three analyses were performed:
1. [[*Simple Water Balance Model (Excel)][Simple Water Balance Model (Excel)]]
   ~shareable_Excel_xlsm_water_balance_model_v3.xlsm~
   Simple Water Balance model implemented in Excel provided by David Toma
2. [[*Simple Water Balance Model (R)][Simple Water Balance model (R)]]
   Simple Water Balance Model implemented in R making use of [[https://github.com/CCRP-Adaptation/WaterBalance][CCRP-Adaptation/WaterBalance]] project
3. [[*Lutz et al. 2010 Water Balance Method][Lutz et al. 2010 Water Balance Method]]
   Lutz 2010 Water Balance Model implemented in R following methods in [cite:@bentzGreatBasinBristlecone2022], which followed [cite:@lutzClimaticWaterDeficit2010]

* Data

** DEM
SRTM 30m DEM used to generate slope, aspect, elevation in QGIS 3.10. Some elevations were provided in the Bentz data set, existing values were used instead of generated ones when available. 

** Soil
SSURGO database

** t50
~merged_jennings.tif~

* Simple Water Balance Model (Excel)
Data from David Thoma's Simple Water Balance model xlsm, processed using provided batch script.  Daymet data obtained using extract_daymet_batch.py script.  PET Values calculated with Penman method
** Libraries
#+begin_src R :session *R3* :eval never-export
  library(tidyverse)
  library(ggplot2)
  library(readxl)
  library(here)
  library(gghighlight)
  library(ggpubr)
  library(metR)
#+end_src

#+RESULTS:
| metR        |
| ggpubr      |
| gghighlight |
| here        |
| readxl      |
| forcats     |
| stringr     |
| dplyr       |
| purrr       |
| readr       |
| tidyr       |
| tibble      |
| ggplot2     |
| tidyverse   |
| stats       |
| graphics    |
| grDevices   |
| utils       |
| datasets    |
| methods     |
| base        |

** Data Import and Cleanup
#+begin_src R :session *R3* :eval never-export :results output none
  setwd("annual")
  tbl <-
      list.files(pattern = "*.csv") %>%
      map_df(~read_csv(., n_max = 41, col_types = cols())) %>% # only read 41 rows (For annual reports) because csvs contain nonsynctactic row of averages at bottom, which creates NAs in df
      mutate(year = strtoi(`Row Labels`)) %>%
      group_by(site)

  setwd(here())
  sites_tbl <- read_excel("sites.xlsx")

  mt_list <- c("PANAMINT RANGE",
               "WAH WAH MOUNTAINS",
               "SILVER PEAK RANGE",
               "HOT CREEK RANGE")
#+end_src

** Summary Table
#+begin_src R :session *R3* :eval never-export :results output none
  summary_tbl <- tbl %>%
    summarise(
      mean_t = mean(`Average of T`),
      mean_P = mean(`Sum of P`),
      mean_AET= mean(`Sum of AET`),
      mean_D= mean(`Sum of D`),
      mean_GDD= mean(`Sum of GDD`),
      mean_SOIL= mean(`Average of SOIL`),
      ###
      mean_t_pre_2010 = mean(`Average of T`[year <= 2010]),
      mean_P_pre_2010 = mean(`Sum of P`[year <= 2010]),
      mean_AET_pre_2010 = mean(`Sum of AET`[year <= 2010]),
      mean_D_pre_2010 = mean(`Sum of D`[year <= 2010]),
      mean_GDD_pre_2010 = mean(`Sum of GDD`[year <= 2010]),
      mean_SOIL_pre_2010 = mean(`Average of SOIL`[year <= 2010]),
      ###
      mean_t_post_2010 = mean(`Average of T`[year > 2010]),
      mean_P_post_2010 = mean(`Sum of P`[year > 2010]),
      mean_AET_post_2010 = mean(`Sum of AET`[year > 2010]),
      mean_D_post_2010 = mean(`Sum of D`[year > 2010]),
      mean_GDD_post_2010 = mean(`Sum of GDD`[year > 2010]),
      mean_SOIL_post_2010 = mean(`Average of SOIL`[year > 2010]),
      ###    Delta values pre and post 2010
      dt = mean_t_post_2010 - mean_t_pre_2010,
      dP = mean_P_post_2010 - mean_P_pre_2010,
      dAET = mean_AET_post_2010 - mean_AET_pre_2010,
      dD = mean_D_post_2010 - mean_D_pre_2010,
      dGDD = mean_GDD_post_2010 - mean_GDD_pre_2010,
      dSOIL = mean_SOIL_post_2010 - mean_SOIL_pre_2010,
      ) %>%
    left_join(sites_tbl, by = c("site" = "Site")) %>%
    group_by(MT_range)
#+end_src

** AET x CWD
#+begin_src R  :session *R3* :eval never-export :results output graphics file :file aed_cwd_excel.png :exports both
    summary_tbl %>%
    ggplot() +
    geom_point(mapping = aes(x = mean_D, y = mean_AET, col = MT_range)) +
    gghighlight(MT_range %in% mt_list,
                use_direct_label = FALSE) +
    ggtitle("AET x CWD Penman Daymet Excel")
#+end_src

#+RESULTS:
[[file:aed_cwd_excel.png]]

** Pre 2010 Plot
#+begin_src R :session *R3* :eval never-export :file pre_2010.png :results output graphics file :exports both
  cwd_plt_pre_2010 <- summary_tbl %>%
    ggplot() +
    geom_point(mapping = aes(x = mean_t_pre_2010, y = mean_D_pre_2010, color = MT_range)) +
    gghighlight(MT_range %in% mt_list,
                  use_direct_label = FALSE) +
    labs(x = "Mean Annual T (1980-2010)", y = "CWD")

  p_plt_pre_2010 <- summary_tbl %>%
    ggplot() +
    geom_point(mapping = aes(x = mean_t_pre_2010, y = mean_P_pre_2010, color = MT_range)) +
    labs(x = "Mean Annual T (1980-2010)", y = "PPT") +
    gghighlight(MT_range %in% mt_list,
                use_direct_label = FALSE)

  aet_plt_pre_2010 <- summary_tbl %>%
    ggplot() +
    geom_point(mapping = aes(x = mean_t_pre_2010, y = mean_AET_pre_2010, color = MT_range)) +
    labs(x = "Mean Annual T", y = "AET") +
    gghighlight(MT_range %in% mt_list,
                use_direct_label = FALSE)

  ggarrange(cwd_plt_pre_2010, p_plt_pre_2010, aet_plt_pre_2010,
            common.legend = TRUE) %>%
    annotate_figure(top = text_grob("Climate Space 1980-2010 Penman Daymet Excel"))
#+end_src

#+RESULTS:
[[file:pre_2010.png]]

** Post 2010 Plot
#+begin_src R :session *R3* :eval never-export :file post_2010.png :results output graphics file :exports both
  cwd_plt_post_2010 <- summary_tbl %>%
    ggplot() +
    geom_point(mapping = aes(x = mean_t_post_2010, y = mean_D_post_2010, color = MT_range)) +
    gghighlight(MT_range %in% mt_list,
                  use_direct_label = FALSE) +
    labs(x = "Mean Annual T (2011-2020)", y = "CWD")

  p_plt_post_2010 <- summary_tbl %>%
    ggplot() +
    geom_point(mapping = aes(x = mean_t_post_2010, y = mean_P_post_2010, color = MT_range)) +
    labs(x = "Mean Annual T (2011-2020)", y = "PPT") +
    gghighlight(MT_range %in% mt_list,
                use_direct_label = FALSE)

  aet_plt_post_2010 <- summary_tbl %>%
    ggplot() +
    geom_point(mapping = aes(x = mean_t_post_2010, y = mean_AET_post_2010, color = MT_range)) +
    labs(x = "Mean Annual T (2011-2020)", y = "AET") +
    gghighlight(MT_range %in% mt_list,
                use_direct_label = FALSE)

  ggarrange(cwd_plt_post_2010, p_plt_post_2010, aet_plt_post_2010,
                               common.legend = TRUE) %>%
    annotate_figure(top = text_grob("Climate Space 2011-2020 Penman Daymet Excel"))
#+end_src

#+RESULTS:
[[file:post_2010.png]]

** Change Plot
#+begin_src R :session *R3* :eval never-export :file aed_cwd_change.png :results output graphics file :exports bothp
  summary_tbl %>%
    ggplot(aes(x = mean_D_pre_2010, y = mean_AET_pre_2010, color = MT_range)) +
    geom_arrow(aes(dx = dD, dy = dAET)) +
    gghighlight(MT_range %in% mt_list, use_direct_label = FALSE) +
    labs(title = "Change in mean AET and CWD over periods from 2010-2021 and 1980-2010 Penman Daymet Excel", x = "CWD (mm)", y = "AET (mm)") +
    scale_mag() 
#+end_src

#+RESULTS:
[[file:aed_cwd_change.png]]

* Simple Water Balance Model (R)
** Daymet
Implement water balance model following David Thoma's Simple Water Balance Model and [[https://github.com/CCRP-Adaptation/WaterBalance][CCRP-Adaptation/WaterBalance]], using Daymet data
*** Libraries and Function Definitions
#+begin_src R :session :eval never-export
  library(raster)
  library(tidyverse)
  library(WaterBalance)
  library(lubridate)
  library(gghighlight)
#+end_src

#+RESULTS:
| lubridate    |
| WaterBalance |
| forcats      |
| stringr      |
| dplyr        |
| purrr        |
| readr        |
| tidyr        |
| tibble       |
| ggplot2      |
| tidyverse    |
| raster       |
| sp           |
| stats        |
| graphics     |
| grDevices    |
| utils        |
| datasets     |
| methods      |
| base         |

Use Penman PET calculation.  Modified from ~WaterBalance::ET_PenmanMonteith_daily~ to work with our data and workflow.  [[https://github.com/CCRP-Adaptation/WaterBalance/blob/6d19806ce5aa6abb6521607fd2da19238dae561d/WaterBalance/R/ET_functions.R#L178][Original version]] had additional arguments for elev and lat, but to facilitate process the df we generate later of all sites we pass lat and elev with each site.

According to David Thoma, ~WaterBalance::ET_PenmanMonteith_daily~ has not been validated against the Simple Water Balance Model xlsm

#+begin_src R :results output silent :session :eval never-export
  ET_PenmanMonteith_daily = function(x, wind=NULL) {
    ##Inputs
    tmax <- x$tmax_C
    tmin <- x$tmin_C
    elev <- x$elev
    lat <- x$lat
    tmean <- (tmax + tmin)/2
    doy <- as.numeric(strftime(x$Date, "%j"))
    rh.max <- x$RHmax
    rh.min <- x$RHmin
    vp <- x$vp
    R.s <- x$srad
    u <- ifelse(is.null(wind) == TRUE, x$wind, wind)
    psyc.const <- psyc_constant(elev)
    vap.curve <- vapor_curve(tmean)
    
    ##Auxilary calculations for wind terms
    DT <- vap.curve/(vap.curve + psyc.const*(1+0.34*u))
    PT <- psyc.const/(vap.curve + (psyc.const*(1+0.34*u)))
    TT <- (900/(tmean + 273))*u

    ##Saturation vapor pressure
    e.tmax <- get_svp(tmax)
    e.tmin <- get_svp(tmin)
    e.s <- (e.tmax + e.tmin)/2

    ##Actual vapor pressure
    if(is.null(vp) == TRUE) {
        if(is.null(rh.max) == TRUE) {
            e.a <- e.tmin
        } else {
            e.a <- actual_vp(rh.max, rh.min)
        }
    } else {
        e.a <- vp
    }

  #Solar angle and radiation calculations
  R.ns <- (1 - 0.23)*R.s
  R.so <- clear_sky_rad(doy, lat, elev)
  R.nl <- outgoing_rad(tmax, tmin, R.s, e.a, R.so)
  R.n <- R.ns - R.nl
  R.ng <- 0.408*R.n

  #ET from radiation
  ET.rad <- DT*R.ng
  #ET from wind
  ET.wind <- PT*TT*(e.s - e.a)
  #Total ET
  ET.o <- ET.rad + ET.wind
  return(ET.o)
}
#+end_src

*** Data Import and Cleanup

Read sites.csv file, same format used for processing with simple water balance model xlsm
#+begin_src R :session :results output silent :eval never-export
  points = read_csv("./sites.csv",
                  col_names = c("site",
                                "lat",
                                "lon",
                                "slope",
                                "aspect",
                                "whc",
                                "wind",
                                "shade",
                                "dro",
                                "t50",
                                "hock",
                                "elev",
                                "mt_range",
                                "owner"),
                  col_types = c("c", "d", "d", "d", "d", "d", "d", "d", "d", "d", "d", "d", "c", "c"),
                  col_select = c("site":"owner"),
                  skip = 1
                  )
  
#+end_src


 Load downloaded daymet data.  Can be batch downloaded using sites.csv file using extract_daymet_batch.py script.  File names (1.csv, 2.csv, ... 512.csv) need to match filenames in sites.csv file.
#+begin_src R :session :results output silent :eval never-export
  alldaymetdata <- list()
  for (i in 1:length(points$site)) {
      daymetdata <- read_csv(file = paste("./daymet/", points$site[i], sep=""), skip = 8,
                             col_names = c("year", "yday", "dayl", "prcp", "srad", "swe", "tmax_C", "tmin_C", "vp"),
                             col_types = c("i", "i", "d", "d", "d", "d", "d", "d", "d"))
      site <- data.frame("site") ## Add on site ids (string equalling filename 1.csv, 2.csv etc) to use as index, not efficient, but easy
      site <- rbind(c(points$site[i]))
      alldaymetdata[[i]] <- cbind(site, daymetdata)
  }
  alldaymetdata <- as_tibble(do.call(rbind, alldaymetdata))
#+end_src

*** Calculate Water Balance parameters
#+begin_src R :session :results output none :eval never-export
  wbdata <- alldaymetdata %>%
    left_join(points, by = "site") %>%
    mutate(wind = NULL,
           vp = vp/1000, #convert to kPa
           srad = srad * 60 * 60 * 24 / 1000000, # convert to MJ m-2 day-1
           tmean_C = (tmax_C + tmin_C) / 2,
           Date = as.Date(yday, origin = paste(as.numeric(year) - 1, "-12-31", sep="")),
           Month = month(Date),
           daylength = get_daylength(Date, lat),
           jtemp = get_jtemp(lon, lat),
           F = get_freeze(jtemp, tmean_C),
           RAIN = get_rain(prcp, F),
           SNOW = get_snow(prcp, F),
           MELT = get_melt(tmean_C, jtemp, hock = 4, SNOW),
           PACK = get_snowpack(jtemp, SNOW, MELT),
           W = MELT + RAIN)

  wbdata$ET_Hamon_daily <- ET_Hamon_daily(wbdata)
  wbdata$ET_Penman_daily <- ET_PenmanMonteith_daily(wbdata, wind = 1) # Need to use our version here which masks WaterBalance::ET_PenmanMonteith_daily()

  wbdata_penman <- wbdata %>%
    group_by(site, year) %>%
    mutate(PET = modify_PET(ET_Penman_daily, slope, aspect, lat, F, shade.coeff = 1),
    W_PET = W - PET,
           SOIL = get_soil(W, mean(whc), PET, W_PET, whc),
           DSOIL = diff(c(mean(whc), SOIL)),
           AET = get_AET(W, PET, SOIL, whc),
           W_ET_DSOIL = W - AET - DSOIL,
           D = PET - AET,
           GDD = get_GDD(tmean_C, 0))

  wbdata_hamon <- wbdata %>%
    group_by(site, year) %>%
    mutate(PET = modify_PET(ET_Hamon_daily, slope, aspect, lat, F, shade.coeff = 1),
           W_PET = W - PET,
           SOIL = get_soil(W, mean(whc), PET, W_PET, whc),
           DSOIL = diff(c(mean(whc), SOIL)),
           AET = get_AET(W, PET, SOIL, whc),
           W_ET_DSOIL = W - AET - DSOIL,
           D = PET - AET,
           GDD = get_GDD(tmean_C, 0)) 

#+end_src



Summary table calculations (Penman)
#+begin_src R :session :results output none :eval never-export
  summary_tbl_by_month_penman <- wbdata_penman %>%
    group_by(site, year, Month) %>%
    summarise(lat = lat, lon = lon, ppt = sum(prcp), T = mean(tmean_C), PET = sum(PET),  AET = sum(AET), D = sum(D), GDD = sum(GDD)) %>% distinct()

  summary_tbl_by_year_penman <- summary_tbl_by_month_penman %>%
    group_by(site, year) %>%
    summarise(lat = lat, lon = lon, ppt = sum(ppt), T = mean(T), PET = sum(PET),  AET = sum(AET), D = sum(D), GDD = sum(GDD)) %>% distinct()

  summary_tbl_all_penman <- summary_tbl_by_year_penman %>%
    group_by(site) %>%
    summarise(ppt = mean(ppt), T = mean(T), AET = mean(AET), D = mean(D), GDD = mean(GDD))
#+end_src

Summary table calculations (Hamon)
#+begin_src R :session :results output none :eval never-export
  summary_tbl_by_month_hamon <- wbdata_hamon %>%
    group_by(site, year, Month) %>%
    summarise(lat = lat, lon = lon, ppt = sum(prcp), T = mean(tmean_C), PET = sum(PET),  AET = sum(AET), D = sum(D), GDD = sum(GDD)) %>% distinct()

  summary_tbl_by_year_hamon <- summary_tbl_by_month_hamon %>%
    group_by(site, year) %>%
    summarise(lat = lat, lon = lon, ppt = sum(ppt), T = mean(T), PET = sum(PET),  AET = sum(AET), D = sum(D), GDD = sum(GDD)) %>% distinct()

  summary_tbl_all_hamon <- summary_tbl_by_year_hamon %>%
    group_by(site) %>%
    summarise(ppt = mean(ppt), T = mean(T), AET = mean(AET), D = mean(D), GDD = mean(GDD))
#+end_src
*** Figures
**** Helper Functions
#+begin_src R :session :results output none :eval never-export
  find_loc <- function(x) {
    #' Lookup site.csv in locations to determine if in region of interest
    panamint_site_ids <- paste(as.character(seq(219, 243)), ".csv", sep="")
    wah_wah_site_ids <- c("497.csv") #paste(as.character(seq(497, 498)), ".csv", sep="")
    silver_peak_site_ids <- paste(as.character(seq(358, 361)), ".csv", sep="")
    rawhide_site_ids <- paste(as.character(seq(154, 165)), ".csv", sep="")
    case_when(x %in% panamint_site_ids ~ "panamint",
              x %in% wah_wah_site_ids ~ "wah_wah",
              x %in% silver_peak_site_ids ~ "silver_peak",
              x %in% rawhide_site_ids ~ "rawhide",
              TRUE ~ "other")
  }

  loc_colors <- c("red", "green", "aquamarine", "darkorchid1", "black")

  mt_list <- c("PANAMINT RANGE",
               "WAH WAH MOUNTAINS",
               "SILVER PEAK RANGE",
               "HOT CREEK RANGE")
             
#+end_src

**** AET x CWD


***** Penman
#+begin_src R :session :file aet_cwd_penman_daymet_swb.png :results graphics file :eval never-export :exports both
  summary_tbl_all_penman %>%
    left_join(points, by = "site") %>%
    ggplot() +
    geom_point(mapping = aes(x = D, y = AET, col = mt_range)) +
    gghighlight(mt_range %in% mt_list,
                use_direct_label = FALSE) +
    ggtitle("AET x CWD Penman Daymet SWB")
#+end_src

#+RESULTS:
[[file:aet_cwd_penman_daymet_swb.png]]


***** Hamon
#+begin_src R :session :file aet_cwd_hamon_daymet_swb.png :results graphics file :eval never-export :exports both
  summary_tbl_all_hamon %>%
    left_join(points, by = "site") %>%
    ggplot(mapping = aes(x = D, y = AET, color = mt_range)) +
    geom_point() +
    gghighlight(mt_range %in% mt_list,
                use_direct_label = FALSE) +
    ggtitle("AET x CWD Hamon Daymet SWB")
#+end_src

#+RESULTS:
[[file:aet_cwd_hamon_daymet_swb.png]]

**** Time Series
***** AET
****** Hamon
#+begin_src R :session :file aet_timeseries_hamon_daymet_swb.png :results graphics file :eval never-export :exports both :width 1080
  summary_tbl_by_month_hamon %>%
    filter(year >= 2012) %>%
    left_join(points, by = "site") %>%
    group_by(mt_range) %>%
    mutate(yearmon = make_date(year, Month)) %>%
    ggplot(mapping = aes(x = yearmon, y = AET, color = mt_range)) +
    geom_line() +
    gghighlight(mt_range %in% mt_list,
                use_direct_label = FALSE) +
    theme(legend.position = "bottom") +
    ggtitle("AET Time Series Hamon Daymet SWB")

#+end_src

#+RESULTS:
[[file:aet_timeseries_hamon_daymet_swb.png]]

****** TODO Penman
***** CWD
****** Hamon
#+begin_src R :session :file cwd_timeseries_hamon_daymet_swb.png :results graphics file :eval never-export :exports both :width 1080
  summary_tbl_by_month_hamon %>%
    filter(year >= 2012) %>%
    left_join(points, by = "site") %>%
    group_by(mt_range) %>%
    mutate(yearmon = make_date(year, Month)) %>%
    ggplot(mapping = aes(x = yearmon, y = D, color = mt_range)) +
    geom_line() +
    gghighlight(mt_range %in% mt_list,
                use_direct_label = FALSE) +
    theme(legend.position = "bottom") +
    ggtitle("CWD Time Series Hamon Daymet SWB")

#+end_src

#+RESULTS:
[[file:cwd_timeseries_hamon_daymet_swb.png]]

****** TODO Penman
***** PPT
****** Hamon
#+begin_src R :session :file ppt_timeseries_hamon_daymet_swb.png :results graphics file :eval never-export :exports both :width 1080
  summary_tbl_by_month_hamon %>%
    filter(year >= 2012) %>%
    left_join(points, by = "site") %>%
    group_by(mt_range) %>%
    mutate(yearmon = make_date(year, Month)) %>%
    ggplot(mapping = aes(x = yearmon, y = ppt, color = mt_range)) +
    geom_line() +
    gghighlight(mt_range %in% mt_list,
                use_direct_label = FALSE) +
    theme(legend.position = "bottom") +
    ggtitle("PPT Time Series Hamon Daymet SWB")

#+end_src

#+RESULTS:
[[file:ppt_timeseries_hamon_daymet_swb.png]]

****** TODO Penman
***** T
****** Hamon
#+begin_src R :session :file t_timeseries_hamon_daymet_swb.png :results graphics file :eval never-export :exports both :width 1080
  summary_tbl_by_month_hamon %>%
    filter(year >= 2012) %>%
    left_join(points, by = "site") %>%
    group_by(mt_range) %>%
    mutate(yearmon = make_date(year, Month)) %>%
    ggplot(mapping = aes(x = yearmon, y = T, color = mt_range)) +
    geom_line() +
    gghighlight(mt_range %in% mt_list,
                use_direct_label = FALSE) +
    theme(legend.position = "bottom") +
    ggtitle("T Time Series Hamon Daymet SWB")

#+end_src

#+RESULTS:
[[file:t_timeseries_hamon_daymet_swb.png]]

****** TODO Penman
*** TODO Jennings Coef
Mike thought jtemp could cause significant differences in these calculations, causing the differences between the models.  Could cause funky calculations in snowpack.  

* Lutz et al. 2010 Water Balance Method
** PRISM
Following [cite:@bentzGreatBasinBristlecone2022], Implement water balance model as in [cite:@lutzClimaticWaterDeficit2010] and supplemental.  Use 800m PRISM 30 yr normals.
*** Libraries
#+begin_src R :session *R2* :eval never-export
  library(prism)
  library(plotly)
  library(raster)
  library(ggplot2)
  library(tidyverse)
  library(lubridate)
  library(gghighlight)
#+end_src

#+RESULTS:
| gghighlight |
| lubridate   |
| forcats     |
| stringr     |
| dplyr       |
| purrr       |
| readr       |
| tidyr       |
| tibble      |
| tidyverse   |
| raster      |
| sp          |
| plotly      |
| ggplot2     |
| prism       |
| stats       |
| graphics    |
| grDevices   |
| utils       |
| datasets    |
| methods     |
| base        |

Be sure to set the download folder using ~prism_set_dl_dir()~.
#+begin_src R :session *R2* :results output none :eval never-export
  prism_set_dl_dir("~/prismtmp")
#+end_src
*** Water Balance Functions
Implement water balance functions from [cite:@lutzClimaticWaterDeficit2010] supplemental
#+begin_src R :session *R2* :results output none :eval never-export
  get_f <- function (tmean) {
    f <- case_when(
      tmean <= 0 ~ 0,
      tmean > 0 & tmean < 6 ~ 0.167 * tmean,
      tmean >= 6 ~ 1)
    return(f)
  }

  get_rain <- function (ppt, F) {
    return(F * ppt)
  }

  get_snow <- function (ppt, F) {
    return( (1 - F) * ppt )
  }

  get_pack <- function (ppt, F, sp.0=NULL) {
    snowpack <- vector()
    sp.0 <- ifelse(!is.null(sp.0), sp.0, 0)
    for (i in 1:length(ppt)) {
      if (i == 1) {
        snowpack[i] = (1 - F[i])**2 * ppt[i] + (1 - F[i]) * sp.0
      } else {
        snowpack[i] = (1 - F[i])**2 * ppt[i] + (1 - F[i]) * snowpack[i - 1]
      }
    }
    return(snowpack)
  }

  get_melt <- function (snow, pack, F, sp.0=NULL) {
    sp.0 <- ifelse(!is.null(sp.0), sp.0, 0)
    melt <- vector()
    for (i in 1:length(snow)) {
      if ( i == 1 ) {
        melt[i] = F[i] * (snow[i] + sp.0)
      } else {
        melt[i] = F[i] * (snow[i] + pack[i-1])
      }
    }
    return(melt)
  }

  get_dl <- function (mon, days, Lat) {
    ## Get Daylength for all days in vector of months
    date <- paste("1980-", mon, "-", days, sep = "")
    yd <- yday(date)
    theta <- 0.2163108+2*atan(0.9671396*tan(0.00860*(yd-186)))
    P <- asin(0.39795 * cos(theta))
    dl <- 24 - (24/pi) * acos((sin((0.8333 * pi)/180) + sin((Lat * pi) / 180) * sin(P))/(cos((Lat*pi)/180)*cos(P)))
    return(dl)
  }

  get_hl <- function (Lat, slope, aspect_f) {
    ## calculate heat load index multiplier
    Lat.rad <- (pi/180) * Lat
    slope.rad <- (pi/180) * slope
    HL <- 0.339 + 0.808 * (cos(Lat.rad) * cos(slope.rad)) - 0.196 * (sin(Lat.rad) * sin(slope.rad)) - 0.482 * (cos(aspect_f) * sin(slope.rad))
    return(HL)
  }

  get_soil <- function (soil_max, w, pet, s.0=NULL) {
    s.0 = ifelse(!is.null(s.0), s.0, 0)
    soil <- vector()
    for (i in 1:length(pet)) {
      if ( i == 1 ) {
        soil[i] = pmin(soil_max[i],
                       if (w[i] > pet[i]) {
                         (w[i] - pet[i]) + s.0
                       } else {
                         s.0 * (1 - exp(-(pet[i]-w[i])/soil_max[i]))
                       })
      } else {
        soil[i] = pmin(soil_max[i],
                       if (w[i] > pet[i]) {
                         (w[i] - pet[i]) + soil[i-1]
                       } else {
                         soil[i-1] * (1 - exp(-(pet[i]-w[i])/soil_max[i]))
                       })
      }
    }
    return(soil)
  }

  get_d_soil <- function (soil, s.0=NULL) {
    s.0 = ifelse(!is.null(s.0), s.0, 0)
    d_soil = soil - lag(soil, default = s.0)
    return(d_soil)
  }

  get_aet <- function (pet, d_soil, w) {
    aet <- vector()
    for (i in 1:length(pet)) {
      a <- min(pet[i], d_soil[i] + w[i])
      aet[i] = if_else(a > 0,
                       a,
                       0)
    }
    return(aet)
  }

#+end_src
*** Download PRISM Normals
Only needs to be run once after which data is saved to prism dl dir
#+begin_src R :session *R2* :results output none :eval never never-export
  get_prism_normals("ppt", "800m", annual = TRUE, keepZip = FALSE)
  get_prism_normals("ppt", "800m", mon = 1:12, keepZip = FALSE)
  get_prism_normals("tmean", "800m", annual = TRUE, keepZip = FALSE)
  get_prism_normals("tmean", "800m", mon = 1:12, keepZip = FALSE)
#+end_src

*** Data Import and Cleanup
#+begin_src R :session *R2* :results output none :eval never-export
  points <- read_csv("./sites.csv")
  points.spdf <- SpatialPointsDataFrame(coords = points[,c('Lon', 'Lat')],
                                        data = points, proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))

  res <- data.frame()
  for (i in 1:12) {
    ppt_pd <- prism_archive_subset("ppt", "monthly normals", resolution = "800m", mon = i)
    ppt_pd <- pd_to_file(ppt_pd)
    ppt_pd_rast <- raster(ppt_pd)
    ppt <- raster::extract(ppt_pd_rast, points.spdf, fun=mean, na.rm=TRUE, sp=FALSE)
    tmean_pd <- prism_archive_subset("tmean", "monthly normals", resolution = "800m", mon = i)
    tmean_pd <- pd_to_file(tmean_pd)
    tmean_pd_rast <- raster(tmean_pd)
    tmean <- raster::extract(tmean_pd_rast, points.spdf, fun=mean, na.rm=TRUE, sp=FALSE)
    df <- data.frame(Site = points$Site, Lat = points$Lat, Lon = points$Lon, mon = i, ppt = ppt, tmean = tmean)
    res <- rbind(res, df)
  }
#+end_src

*** Water Balance Calculations
#+begin_src R :session *R2* :results output none :eval never-export
  result <- res %>%
    left_join(points, by = c("Site" = "Site")) %>%
    mutate(Lat = Lat.x,
           Lon = Lon.x) %>%
    group_by(Site) %>%
    arrange(mon) %>%    
    # defaults
    mutate(slope = SLOPE_QGIS,
           aspect = ASPECT_QGIS,
           soil_max = 100,
           hock = 4) %>%    
    mutate(F = get_f(tmean),
           RAIN = get_rain(ppt, F),
           SNOW = get_snow(ppt, F),
           PACK = get_pack(ppt, F),
           MELT = get_melt(SNOW, PACK, F), 
           W = RAIN + MELT,
           Days = days_in_month(mon),
           DL = get_dl(mon, Days, Lat),
           A = abs(180 - abs(aspect - 225)), # folded aspect
           HL = get_hl(Lat, slope, A),
           e = 0.611 * exp((17.3 * tmean) / (tmean + 237.3)),
           PET = 29.8 * Days * DL * HL * (e / (tmean + 273.2)),
           #PET = 29.8 * Days * DL * (e / (tmean + 273.2))) %>%
           SOIL = get_soil(soil_max, W, PET),
           dSOIL = get_d_soil(SOIL),
           AET = get_aet(PET, dSOIL, W),
           D = PET - AET)
#+end_src

*** Figures

**** Helper Functions
#+begin_src R :session *R2* :results output none :eval never-export
  find_loc <- function(x) {
    #' Lookup site.csv in locations to determine if in region of interest
    panamint_site_ids <- paste(as.character(seq(219, 243)), ".csv", sep="")
    wah_wah_site_ids <- c("497.csv") #paste(as.character(seq(497, 498)), ".csv", sep="")
    silver_peak_site_ids <- paste(as.character(seq(358, 361)), ".csv", sep="")
    rawhide_site_ids <- paste(as.character(seq(154, 165)), ".csv", sep="")
    case_when(x %in% panamint_site_ids ~ "panamint",
              x %in% wah_wah_site_ids ~ "wah_wah",
              x %in% silver_peak_site_ids ~ "silver_peak",
              x %in% rawhide_site_ids ~ "rawhide",
              TRUE ~ "other")
  }

  loc_colors <- c("red", "green", "aquamarine", "darkorchid1", "black")

  mt_list <- c("PANAMINT RANGE",
               "WAH WAH MOUNTAINS",
               "SILVER PEAK RANGE",
               "HOT CREEK RANGE")
#+end_src

**** AET x CWD
#+begin_src R :session *R2* :file aed_x_cwd_hamon_prism_lutz.png :results output graphics file :eval never-export :exports both
  result %>%
    group_by(Site) %>%
    filter(Elev_m != TRUE) %>%
    summarise(D = sum(D),
              AET = sum(AET),
              T = mean(tmean),
              ppt = sum(ppt),
              elev = mean(Elev_m)) %>%
    left_join(points, by = "Site") %>%
    ggplot(mapping = aes(x = D, y = AET, color = MT_range)) +
    geom_point() +
    gghighlight(MT_range %in% mt_list,
                use_direct_label = FALSE) +
    ggtitle("AED x CWD Hamon PRISM Lutz")

#+end_src

#+RESULTS:
[[file:aed_x_cwd_hamon_prism_lutz.png]]

* Hypotheses
1. Low AET values -> carbon starvation -> increased susceptibility to MPB
2. High treeline temperature growth release.  High temps -> accelerated growth rates in T-limited systems -> decreased wood density (?) -> increased susceptibility to MPB
   - High temperature release reported in PILO in White Mountains by [cite:@salzerRecentUnprecedentedTreering2009]
3. Beetle Hypothesis: Exploding beetle populations, enhanced by climate change, are overwhelming usual food source, PIFL.  The beetles are forced to seek out novel food sources (i.e., PILO, which has previously been shown to be resistant to MPB [cite:@bentzDefenseTraitsLong2017]).  Beetle feeding could occur at low, undetected levels in PILO and not cause apparent harm, might be now passing threshold that can kill trees.


* Discussion
** Issues
Penman PET calculation returns extreme values for CWD and AET.  This occurs in both analyses above implementing the Simple Water Balance model in R and Excel.  The CWD values generated would be expected from a desert rather than montane forest.  This occurs with both our version as well as the version from WaterBalance.  ~WaterBalance::ET_Hamon_daily~ however appears to return correct results.  The patterns remain consistent between Hamon and Penman analyses, but absolute values vary.

(Possible) Reasons for differences between models:
- Additional Variables accounted for in Simple Water Balance Model that are missing from Lutz 2010 method
  1. jtemp - Lutz method uses simpler method to determine F
  2. vp - not used in ~WaterBalance:ET_Hamon_daily~
  3. srad - not used in ~WaterBalance:ET_Hamon_daily~
- Calculations from daily time series (SWB) instead of 30 yr monthly normals (Lutz)

** Conclusions
[cite:@bentzGreatBasinBristlecone2022] determined that the PILO mortality event on Telescope Peak occured at a location that is middle of the road in PILO's climate space.  Their climatic analysis used PRISM 30 year normals and the Hamon method to determine PET, following [cite:@lutzClimaticWaterDeficit2010].  While their code and thus exact method was not provided, we were able to approximately recreate their analysis above, receiving similar results.

Our analysis using the Simple Water Balance model method with Hamon PET calculations placed the Telescope Peak sites in a different climatic space than reported by [cite:@bentzGreatBasinBristlecone2022].  We found that the Telescope Peak sites had extremely low AET (89.2 - 107 mean for all years, mean for all sites for all years = 206), while CWD values were around the average for all sites.   


* Bibliography 
#+PRINT_BIBLIOGRAPHY:
